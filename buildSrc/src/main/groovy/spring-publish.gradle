plugins {
	id	'com.jfrog.artifactory'
	id	'maven-publish'
	id	'io.github.gradle-nexus.publish-plugin'
}

def isSnapshot = version.endsWith("-SNAPSHOT")
def isMilestone = !isSnapshot && (version.contains("-M") || version.contains("-RC"))

publishing {
	publications {
		maven(MavenPublication) {
			from(components.java)
		}
	}
}

java {
	withJavadocJar()
	withSourcesJar()
}

def hasSigningKey = project.hasProperty("signing.keyId") || project.findProperty("signingKey")
if(hasSigningKey) {
	sign(project)
}
void sign(Project project) {
	project.signing {
		required { project.gradle.taskGraph.hasTask("publish") }
		def signingKeyId = project.findProperty("signingKeyId")
		def signingKey = project.findProperty("signingKey")
		def signingPassword = project.findProperty("signingPassword")
		if (signingKeyId) {
			useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
		} else if (signingKey) {
			useInMemoryPgpKeys(signingKey, signingPassword)
		}
		sign publishing.publications.maven
	}
}

publishing.publications.withType(MavenPublication).all { mavenPublication ->
	mavenPublication.pom {
		name = "${project.group}:${project.name}"
		description = name
		url = "https://github.com/spring-io/spring-release-train-tools"
		licenses {
			license {
				name = "The Apache License, Version 2.0"
				url = "https://www.apache.org/licenses/LICENSE-2.0"
			}
		}
		developers {
			developer {
				id = "rwinch"
				name = "Rob Winch"
				email = "rwinch@noreply.github.com"
			}
		}
		scm {
			connection = "scm:git:https://github.com/spring-io/spring-release-train-tools"
			developerConnection = "scm:git:ssh://github.com/spring-io/spring-release-train-tools.git"
			url = "https://github.com/spring-io/spring-release-train-tools"
		}
	}
}

artifactory {
	publish {
		repository {
			repoKey = isSnapshot ? 'libs-snapshot-local' : isMilestone ? 'libs-milestone-local' : 'libs-release-local'
			if (project.hasProperty("artifactoryUsername")) {
				username = artifactoryUsername
				password = artifactoryPassword
			}
		}
		defaults {
			publishIvy = false
		}
	}
}

nexusPublishing {
	repositories {
		sonatype()
	}

	// these are not strictly required. The default timeouts are set to 1 minute. But Sonatype can be really slow.
	// If you get the error "java.net.SocketTimeoutException: timeout", these lines will help.
	connectTimeout = Duration.ofMinutes(3)
	clientTimeout = Duration.ofMinutes(3)
}

// configure publishing to a local directory for testing (not necessary)
// ./gradlew publishMavenToLocal
// tree ./build/repos/releases
publishing {
	repositories {
		maven {
			name = "local"
			// change URLs to point to your repos, e.g. http://my.org/repo
			def releasesRepoUrl = "$buildDir/repos/releases"
			def snapshotsRepoUrl = "$buildDir/repos/snapshots"
			url = version.endsWith("SNAPSHOT") ? snapshotsRepoUrl : releasesRepoUrl
		}
	}
}